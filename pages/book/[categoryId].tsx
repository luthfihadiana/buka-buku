import type { NextPage } from 'next'
import { useState, useEffect, useMemo } from 'react';
import { useRouter } from "next/router";
import axios from 'axios';
import Head from 'next/head'
import styles from '../../styles/BooksCategory.module.css'
import {
  BsFillArrowLeftCircleFill,
  BsFillArrowRightCircleFill,
  BsArrowLeftShort,
} from "react-icons/bs";
import { Book } from '../../Models';
import { BookComp } from '../../components';
import { useBookmark, useCategories } from '../../Hooks';

const PAGE_SIZE = 6;

const Home: NextPage = () => {
  const router = useRouter();
  const { categoryId } = router.query;
  const [data, setData] = useState<Book[] | null>(null);
  const [page, setPage] = useState(0);
  const [keyword, setKeyword] = useState('');
  // const [pageSearch, setPageSearch] = useState(0);
  const [loading, setLoading] = useState(true);
  const { isBookmarked, toggleBookmark } = useBookmark();
  const { categories } = useCategories();

  useEffect(() => {
    if (!categoryId) return;
    setLoading(true);
    if (keyword !== '') {
      setPage(0);
      const handleKeyword = setTimeout(() => {
        axios.get(`/api/books`, {
          params: {
            categoryId,
          }
        }).then((res) => {
          const books: Book[] = res.data;
          const filteredBooks = books.filter(
            el => el.authors.findIndex(author => author.toLowerCase().includes(keyword.toLowerCase())) !== -1
              || el.title.toLowerCase().includes(keyword.toLowerCase())
          )
          setData([...filteredBooks]);
        }).finally(() => {
          setLoading(false);
        });
      }, 1000)
      return () => {
        clearTimeout(handleKeyword);
      };
    }
    axios.get(`/api/books`, {
      params: {
        categoryId,
        page,
        size: PAGE_SIZE
      }
    }).then((res) => {
      const books: Book[] = res.data;
      setData([...books]);
    }).finally(() => {
      setLoading(false);
    });
  }, [categoryId, page, keyword]);

  const handlePage = (type: 'inc' | 'dec') => {
    switch (type) {
      case 'inc':
        if (!data || data?.length < PAGE_SIZE) return;
        setPage(prev => prev + 1);
        break;
      case 'dec':
        if (page <= 0) return;
        setPage(prev => prev - 1);
        break;
    }
  }

  const titlePage = useMemo(() => {
    if (!categories) return '';
    const element = categories.find(el => el.id == categoryId);
    return element?.name;
  }, [categories]);

  // const searchPaginatedBook = useMemo(() => {
  //   if (keyword === '' || !data) return null;
  //   let books: Book[] = [];
  //   const lastIdx = pageSearch + 5 > data?.length - 1 ? data?.length - 1 : pageSearch + 5;
  //   for (let i = pageSearch; i <= lastIdx; i++) {
  //     books.push(data[i]);
  //   }
  //   return books;
  // }, [data, keyword, pageSearch]);

  const placeholderText = () => {
    if (loading) return 'Loading';
    if (keyword) return `Book not found with keyword "${keyword}"`
    return 'Book not found'
  }


  return (
    <div className={styles.container}>
      <Head>
        <title>BukaBuku - {titlePage}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <a href="/" className={styles.backButton}>
          <BsArrowLeftShort />
        </a>
        <h1 className={styles.title}>
          Buka<span className={styles.highlight}>Buku</span>
        </h1>
        <h2>{titlePage}</h2>
        <input type="text"
          className={styles.inputSearch}
          onChange={(e) => setKeyword(e.target.value)}
          placeholder="Enter book name"
          value={keyword} />
        {
          loading || !data || data?.length <= 0
            ? <section className={styles.placeholder}>
              <p>{placeholderText()}</p>
            </section>
            : <section className={styles.grid}>
              {
                data?.map(el =>
                  <BookComp
                    data={el}
                    isBookmarked={isBookmarked(el)}
                    handleBookmarkAction={toggleBookmark} />
                )
              }
            </section>
        }
        {keyword === '' &&
          <div className={styles.pagination}>
            {page > 0 &&
              <button onClick={() => handlePage('dec')}>
                <BsFillArrowLeftCircleFill />
              </button>
            }
            <span>{page + 1}</span>
            {
              data && data?.length <= PAGE_SIZE &&
              <button onClick={() => handlePage('inc')}>
                <BsFillArrowRightCircleFill />
              </button>
            }
          </div>}
      </main>
    </div>
  )
}

export default Home
